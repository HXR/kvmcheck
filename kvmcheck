#!/bin/bash
# kvmcheck - Utility for verifiyng hardware enablement for KVM
# Copyright (C) 2018 HXR LLC
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set the HELP text
read -d '' help <<- EOF
Usage: kvmcheck [-p|--print] [-r|--report {kvmcheck.yaml}] [-d|--debug] [-h|--help]

Utility for verifying hardware enablement for KVM.

Optional Arguments:
    -p, --print         Print the resulting yaml output, silences all other output
    -r, --report        Output yaml to a file. Default is kvmcheck.yaml
    -d, --debug         Print debug information
    -h, --help          Show this help message and exit
EOF

VERSION="0.1.2"

FILE="kvmcheck.yml"

# Some common printing functions

confirm() {
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}
print() {
    if [[ -z "$PRINT" || ! -z "$DEBUG" ]]; then
        printf "$@"
    fi
}
heading() {
    print "%s\\n" "$(tput sgr 0 1)$*$(tput sgr0)"
}
ok() {
    print "%s\\n" "$(tput setaf 2)$*$(tput sgr0)"
}
warn() {
    print "%s\\n" "$(tput setaf 3)$*$(tput sgr0)" >&2
}
error() {
    print "%s\\n" "$(tput bold; tput setaf 1)$*$(tput sgr0)" >&2
}
abort() {
    error "Aborting!"
    exit 1
}

usage(){
    echo "$help"
    exit ${1:-1}
}

isarg() {
    # Check if value exists and starts with a hyphen
    [[ ! -z "$1" && ! "$1" =~ ^[-]+ ]] && return 1 || return 0
}

# Shift through keywords
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -r|--report)
            REPORT=1
            if ! isarg "$2"; then
                FILE="$2"
                # Remember to shift the argument too
                shift
            fi
            ;;
        -p|--print)
            PRINT=1
            ;;
        -h|--help)
            usage 0
            ;;
        -d|--debug)
            DEBUG=1
            ;;
        *)
            error "Invalid Option: $key"
            echo ""
            usage
            ;;
    esac
    shift
done
set -- "${POSITIONAL[@]}"

LSCPU="${LSCPU:-$(which lscpu)}"
LSCPU_output="$($LSCPU)"

LSBRELEASE="${LSBRELEASE:-$(which lsb_release)}"
LSBRELEASE_output="$($LSBRELEASE -a)"

declare -a flags
declare -a modules

split_read() {
    grep '^'"$2"'' <<< "$1" | awk '{for(i='"${3:-2}"'+1;i<=NF;i++) printf("%s%s",$i,i==NF?RS:OFS);}'
    return
}

check_cpu_flag() {
  local flag="$1"
  grep -E -c " $flag " <<<"$LSCPU_output"
  return
}

check_kvm_amd() {
  # Check CPU extensions for Hardware Virtualization support
  # https://en.wikipedia.org/wiki/X86_virtualization#Central_processing_unit
  # Virtualization: AMD-V
  # SVM: Secure Virtual Machine
  flag=("svm;$(check_cpu_flag 'svm')")
  if [[ ${flag##*;} -ne 0 ]]; then
    ok "CPU supports Hardware Virtualization"
  else
    error "Error: Support for 'AMD-V' CPU extension not found - Check specifications"
    exit 1
  fi
  flags+=($flag)
  # Check: KVM kernel module loaded
  module="kvm_amd;$(lsmod | grep -m 1 -E -c '(^kvm_amd)')"
  if [[ ${module##*;} -ne 0 ]]; then
    ok "KVM kernel module loaded"
  else
    error "Error: kvm_amd kernel module not loaded - Check BIOS"
  fi
  modules+=($module)
  if [[ -d "/sys/module/kvm_amd" ]]; then
    # Interrupt Virtualization
    # https://en.wikipedia.org/wiki/APICv#Interrupt_virtualization_(AMD_AVIC_and_Intel_APICv)
    flag="avic;$(cat /sys/module/kvm_amd/parameters/avic)"
    if [[ ${flag##*;} -ne 0 ]]; then
      ok "Interrupt Virtualization enabled"
    else
      error "Error: AMD AVIC not enabled - try: 'modprobe kvm_amd avic=1'"
    fi
    flags+=($flag)
    # Nested Virtualization
    # https://en.wikipedia.org/wiki/Nested_virtualization#Nested_virtualization
    flag="nested;$(cat /sys/module/kvm_amd/parameters/nested)"
    if [[ ${flag##*;} -ne 0 ]]; then
      ok "Nested Virtualization enabled"
    else
      warn "Nested Virtualization disabled"
    fi
    flags+=($flag)
    # Nested Page Tables
    flag="npt;$(cat /sys/module/kvm_amd/parameters/npt)"
    if [[ ${flag##*;} -ne 0 ]]; then
      ok "Nested Virtualization enabled"
    else
      warn "Nested Page Tables disabled"
    fi
    flags+=($flag)
  else
    error "Error: unable to access kernel parameters"
  fi
}

check_kvm_intel() {
  # Check CPU extensions for Hardware Virtualization support
  # https://en.wikipedia.org/wiki/X86_virtualization#Central_processing_unit
  # Virtualization: VT-x
  # VMX: Virtual Machine Extensions
  flag="vmx;$(check_cpu_flag 'vmx')"
  if [[ ${flag##*;} -ne 0 ]]; then
    ok "CPU supports Hardware Virtualization"
  else
    error "Error: Support for 'VT-x' CPU extension not found - Check specifications"
    exit 1
  fi
  flags+=($flag)
  # Check: KVM kernel module loaded
  module="kvm_intel;$(lsmod | grep -m 1 -E -c '(^kvm_intel)')"
  if [[ ${module##*;} -ne 0 ]]; then
    ok "KVM kernel module loaded"
  else
    error "Error: kvm_intel kernel module not loaded - Check BIOS"
  fi
  modules+=($module)
  if [[ -d "/sys/module/kvm_intel" ]]; then
    # Interrupt Virtualization
    # https://en.wikipedia.org/wiki/APICv#Interrupt_virtualization_(AMD_AVIC_and_Intel_APICv)
    flag="apicv;$(grep -c Y /sys/module/kvm_intel/parameters/enable_apicv)"
    if [[ ${flag##*;} -ne 0 ]]; then
      ok "Interrupt Virtualization enabled"
    else
      error "Error: Intel APICv not enabled"
    fi
    flags+=($flag)
    # Nested Virtualization
    # https://en.wikipedia.org/wiki/Nested_virtualization#Nested_virtualization
    flag="nested;$(grep -c Y /sys/module/kvm_intel/parameters/nested)"
    if [[ ${flag##*;} -ne 0 ]]; then
      ok "Nested Virtualization enabled"
    else
      warn "Nested Virtualization disabled"
    fi
    flags+=($flag)
  else
    error "Error: unable to access kernel parameters"
  fi
}

################################

heading "Verifying hardware enablement for KVM"

cpu_model=$(split_read "$LSCPU_output" "Model name:")
os=$(split_read "$LSBRELEASE_output" "Description:" 1)

if [[ "$(grep '^Vendor\ ID:' <<<"$LSCPU_output" | grep -c -i 'Intel' )" -ne 0 ]]; then
  cpu_vendor="intel"
elif [[ "$(grep '^Vendor\ ID:' <<<"$LSCPU_output" | grep -c -i 'AMD')" -ne 0 ]]; then
  cpu_vendor="amd"
else
  cpu_vendor="unknown"
fi

case $cpu_vendor in
  intel)    check_kvm_intel;;
  amd)      check_kvm_amd;;
  unknown)  error "Unknown CPU Vendor" && exit 1;;
esac

# Check for 64-bit support
flag="x86_64;$(check_cpu_flag 'lm')"
if [[ ${flag##*;} -ne 0 ]]; then
  ok "64-bit support enabled"
else
  warn "Warning: Enable 64-bit support for improved performance"
fi
flags+=($flag)

# Check: /dev/kvm permissions
if [[ -c "/dev/kvm" ]]; then
  ok "/dev/kvm Found"
else
  error "Error: /dev/kvm Not Found"
fi
if [[ -w "/dev/kvm" ]]; then
  ok "/dev/kvm writeable"
else
  error "Error: /dev/kvm - Check permissions"
fi

# I/O MMU Virtualization
# https://en.wikipedia.org/wiki/X86_virtualization#I/O_MMU_virtualization_(AMD-Vi_and_Intel_VT-d)
module="iommu;$(find /sys 2>&1 /dev/null | grep -m -1 -c dmar)"
if [[ ${module##*;} -ne 0 ]]; then
  ok "I/O MMU Virtualization Enabled"
else
  error "Error: I/O MMU Virtualization not enabled"
fi
modules+=($module)

read -d '' yaml <<- EOF
# kvmcheck v$VERSION
# Run 'kvmcheck --report $FILE' for more details

- os: $os
  kernel: $(uname -r)
  vendor: $cpu_vendor
  cpu: $cpu_model
  modules:
$(for i in "${modules[@]}"; do printf "%s%s: %s\n" "  - " "${i%%;*}" "${i##*;}"; done)
  flags:
$(for i in "${flags[@]}"; do printf "%s%s: %s\n" "  - " "${i%%;*}" "${i##*;}"; done)
EOF


if [[ "$PRINT" -eq 1 || ! -z "$PRINT" ]]; then
    heading "Printing output:"
    echo "$yaml"
fi

if [[ "$REPORT" -eq 1 || ! -z "$REPORT" ]]; then
    heading "Outputting report"
    if [[ ! -f "$FILE" ]]; then
        if [[ -L "$FILE" ]]; then
            error "The output file seems to be a broken symlink: $FILE"
            confirm "Overwrite the symlink? [y/N]" || abort
        elif [[ -d "$FILE" ]]; then
            error "The output file seems to be a directory: $FILE"
            confirm "Output to "$FILE"/kvmcheck.yml? [y/N]" || abort
            [[ "$FILE" =~ /$ ]] && FILE+="kvmcheck.yml" || FILE+="/kvmcheck.yml"
        fi
    else
        error "File exists! $FILE"
        confirm "Overwrite? [y/N]" || abort
    fi
    ok "Writing output report to: $FILE"
    echo "$yaml" >| "$FILE"
fi

exit 0
