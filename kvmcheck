#!/bin/bash
# kvmcheck - Utility for verifiyng hardware enablement for KVM
# Copyright (C) 2018 HXR LLC
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LSCPU="${LSCPU:-$(which lscpu)}"
LSCPU_output=$($LSCPU)

ok() {
  printf "%s\\n" "$(tput setaf 2)$*$(tput sgr0)"
}
warn() {
  printf "%s\\n" "$(tput setaf 3)$*$(tput sgr0)" >&2
}
error() {
  printf "%s\\n" "$(tput bold; tput setaf 1)$*$(tput sgr0)" >&2
}

check_cpu_flag() {
  local flag="$1"
  grep -E -c " $flag " <<<"$LSCPU_output"
  return
}

check_kvm_amd() {
  # Check CPU extensions for Hardware Virtualization support
  # https://en.wikipedia.org/wiki/X86_virtualization#Central_processing_unit
  # Virtualization: AMD-V
  # SVM: Secure Virtual Machine
  if [[ $(check_cpu_flag "svm") -ne 0 ]]; then
    ok "CPU supports Hardware Virtualization"
  else
    error "Error: Support for 'AMD-V' CPU extension not found - Check specifications"
    exit 1
  fi
  # Check: KVM kernel module loaded
  if [[ $(lsmod | grep -m 1 -E -c '(^kvm_amd)') -ne 0 ]]; then
    ok "KVM kernel module loaded"
  else
    error "Error: kvm_amd kernal module not loaded"
  fi
  if [[ -d "/sys/module/kvm_amd" ]]; then
    # Interrupt Virtualization
    # https://en.wikipedia.org/wiki/APICv#Interrupt_virtualization_(AMD_AVIC_and_Intel_APICv)
    if [[ $(cat /sys/module/kvm_amd/parameters/avic) -ne 0 ]]; then
      ok "Interrupt Virtualization enabled"
    else
      error "Error: AMD AVIC not enabled - try: 'modprobe kvm_amd avic=1'"
    fi
    # Nested Virtualization
    # https://en.wikipedia.org/wiki/Nested_virtualization#Nested_virtualization
    if [[ $(cat /sys/module/kvm_amd/parameters/nested) -ne 0 ]]; then
      ok "Nested Virtualization enabled"
    else
      warn "Nested Virtualization disabled"
    fi
    # Nested Page Tables
    if [[ $(cat /sys/module/kvm_amd/parameters/npt) -ne 0 ]]; then
      ok "Nested Virtualization enabled"
    else
      warn "Nested Page Tables disabled"
    fi
  else
    error "Error: unable to access kernal parameters"
  fi
}

check_kvm_intel() {
  # Check CPU extensions for Hardware Virtualization support
  # https://en.wikipedia.org/wiki/X86_virtualization#Central_processing_unit
  # Virtualization: VT-x
  # VMX: Virtual Machine Extensions
  if [[ $(check_cpu_flag "vmx") -ne 0 ]]; then
    ok "CPU supports Hardware Virtualization"
  else
    error "Error: Support for 'VT-x' CPU extension not found - Check specifications"
    exit 1
  fi
  # Check: KVM kernel module loaded
  if [[ $(lsmod | grep -m 1 -E -c '(^kvm_intel)') -ne 0 ]]; then
    ok "KVM kernel module loaded"
  else
    error "Error: kvm_intel kernal module not loaded"
  fi
  # Interrupt Virtualization
  # https://en.wikipedia.org/wiki/APICv#Interrupt_virtualization_(AMD_AVIC_and_Intel_APICv)
  if [[ $(grep -c Y /sys/module/kvm_intel/parameters/enable_apicv) -ne 0 ]]; then
    ok "Interrupt Virtualization enabled"
  else
    error "Error: Intel APICv not enabled"
  fi
  # Nested Virtualization
  # https://en.wikipedia.org/wiki/Nested_virtualization#Nested_virtualization
  if [[ $(grep -c Y /sys/module/kvm_intel/parameters/nested) -ne 0 ]]; then
    ok "Nested Virtualization enabled"
  else
    warn "Nested Virtualization disabled"
  fi
}

################################

echo "$(tput sgr 0 1)Verifiyng hardware enablement for KVM$(tput sgr0)"

if [[ "$(grep '^Vendor\ ID:' <<<"$LSCPU_output" | grep -c -i 'Intel' )" -ne 0 ]]; then
  cpu_vendor="intel"
elif [[ "$(grep '^Vendor\ ID:' <<<"$LSCPU_output" | grep -c -i 'AMD')" -ne 0 ]]; then
  cpu_vendor="amd"
else
  cpu_vendor="unknown"
fi

case $cpu_vendor in
  intel)    check_kvm_intel;;
  amd)      check_kvm_amd;;
  unknown)  error "Unknown CPU Vendor" && exit 1;;
esac

# Check for 64-bit support
if [[ $(check_cpu_flag "lm") -ne 0 ]]; then
  ok "64-bit support enabled"
else
  warn "Warning: Enable 64-bit support for improved performance"
fi

# Check: /dev/kvm permissions
if [[ -c "/dev/kvm" ]]; then
  ok "/dev/kvm Found"
else
  error "Error: /dev/kvm Not Found"
fi
if [[ -w "/dev/kvm" ]]; then
  ok "/dev/kvm writeable"
else
  error "Error: /dev/kvm - Check permissions"
fi

# I/O MMU Virtualization
# https://en.wikipedia.org/wiki/X86_virtualization#I/O_MMU_virtualization_(AMD-Vi_and_Intel_VT-d)
if [[ $(find /sys 2>&1 /dev/null | grep -m 1 -c dmar) -ne 0 ]]; then
  ok "I/O MMU Virtualization Enabled"
else
  error "Error: I/O MMU Virtualization not enabled"
fi

exit 0
